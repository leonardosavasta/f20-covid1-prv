college <- read.csv(url("http://faculty.marshall.usc.edu/gareth-james/ISL/College.csv"))
college <- read.csv(url("http://faculty.marshall.usc.edu/gareth-james/ISL/College.csv"))
rownames(college) <- college[,1]
college <- college[-c(1)]
college$Private <- as.factor(college$Private)
summary(college)
pairs(college[,1:10])
plot(college$Private, college$Outstate)
library(ggplot2)
dim(mpg)
mpg
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)
?mpg
ggplot(data = mpg) + geom_point(mapping = aes(x = hwy, y = cyl))
?mpg
ggplot(data = mpg) + geom_point(mapping = aes(x = cyl, y = hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x = class, y = drv))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, size = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = class))
?mpg
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, size = hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, shape = hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, alpha = hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, alpha = cty))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = cty))
?mpg
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = hwy, size=hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = hwy))
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = displ < 5))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(drv ~ cyl)
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(~ cyl)
.
.
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(. ~ hwy)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(. ~ cty)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(drv ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = drv, y = cyl))
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
?mpg
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) + geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point() + geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) + geom_point() + geom_smooth(se = FALSE)
geom_smooth()
?geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) + geom_point() + geom_smooth(se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) + geom_point() + geom_smooth(se = TRUE)
?mpg
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) + geom_point() + geom_smooth(se = FALSE)
library(MASS)
View(Boston)
names(Boston)
View(Boston)
Boston?
?
()
?Boston
summary(Boston)
attach(Boston)
library(ggplot2)
p <- ggplot(Boston, aes(x=lstat, y=medv)) +
geom_point()
print(p)
lm.fit <- lm(medv ~ lstat)
lm.fit
summary(lm.fit)
?Boston
confint.lm(lm.fit)
lm.fit
lm.fit.lstat
lm.fit$lstat
lm.fit
lm.fit[]
lm.fit
typeof(lm.fit)
lm.fit[0]
lm.fit[1]
lm.fit[1]
lm.fit[2]
lm.fit
View(lm.fit)
lm.fit[1]
lm.fit[1][0]
lm.fit[1][1]
lm.fit[1][2]
lm.fit[1][1][1]
lm.fit['coefficients']
lm.fit['coefficients']['lstat']
typeof(lm.fit['coefficients'])
typeof(lm.fit['coefficients'][0]
typeof(lm.fit['coefficients'][0])
typeof(lm.fit['coefficients'][0])
typeof(lm.fit['coefficients'][1])
lm.fit
print(34.55 + 5 * (-0.95))
print(34.55 + 10 * (-0.95))
print(34.55 + 15 * (-0.95))
predict(lm.fit, data.frame(lstat = c(5, 10, 15)), interval = "confidence")
plot(lstat, medv) abline(lm.fit)
plot(lstat, medv)
plot(lstat, medv)
plot(lstat, medv) + abline(lm.fit)
plot(lstat, medv) + abline(lm.fit, lwd=3, col="red")
plot(lstat, medv) + abline(lm.fit, lwd=10, col="red")
plot(lstat, medv) + abline(lm.fit, lwd=3, col="red")
plot(lstat, medv, pch=20) + abline(lm.fit, lwd=3, col="red")
plot(lstat, medv, pch=10) + abline(lm.fit, lwd=3, col="red")
plot(1:20)
plot(1:20, 1:20, pch=1:20)
plot(lm.fit)
ggplot(Boston, aes(x=lstat, y=medv)) + geom_point() + geom_smooth(method="lm")
library(ggplot2)
library(ISLR)
install.packages('ISLR')
library(ISLR)
ggplot(Boston, aes(x=age, y=medv)) + geom_point()
ggplot(Boston, aes(x=nox, y=medv)) + geom_point()
ggplot(Boston, aes(x=indus, y=medv)) + geom_point()
ggplot(Boston, aes(x=crim, y=medv)) + geom_point()
ggplot(Boston, aes(x=black, y=medv)) + geom_point()
ggplot(Boston, aes(x=ptratio, y=medv)) + geom_point()
ggplot(Boston, aes(x=dis, y=medv)) + geom_point()
summary(Auto)
?Auto
ggplot(Auto, aes(x=horsepower, y=mpg)) + geom_point()
lm.fit <- lm(mpg <- horsepower)
lm.fit <- lm(mpg ~ horsepower)
attach(Auto)
lm.fit <- lm(mpg ~ horsepower)
summary(lm.fit)
View(Auto)
?Boston
ggplot(Boston, aes(x=lstat, y=medv)) + geom_point() + geom_smooth(method="lm")
ggplot(Boston, aes(x=crim, y=medv)) + geom_point() + geom_smooth(method="lm")
ggplot(Boston, aes(x=nox, y=medv)) + geom_point() + geom_smooth(method="lm")
ggplot(Boston, aes(x=nox, y=lsat)) + geom_point() + geom_smooth(method="lm")
ggplot(Boston, aes(x=nox, y=lstat)) + geom_point() + geom_smooth(method="lm")
lm.fit <- lm(mpg ~ horsepower)
summary(lm.fit)
predict(lm.fit, data.frame(horsepower=c(120,200,300))
predict(lm.fit, data.frame(horsepower=c(120,200,300)))
predict(lm.fit, data.frame(horsepower=c(120,200,300)))
ggplot(Auto, aes(x=horsepower, y=mpg)) + geom_smooth(method='lm')
ggplot(Auto, aes(x=horsepower, y=mpg)) + geom_point() +  geom_smooth(method='lm')
View(Auto)
?Auto
ggplot(Auto, aes(x=horsepower, y=mpg)) + geom_point() +  geom_smooth(method='lm')
library(ISLR)
library(Default)
summary(Default)
attach(Default)
summary(Default)
m.balance <- glm(default ~ balance,, family = binomial)
summary(m.balance)
m.balance <- glm(default ~ balance,, family = binomial)
m.balance <- glm(default = balance,, family = binomial)
m.balance <- glm(default ~ balance,, family = binomial)
summary(m.balance)
pred.data <- data.frame(balance=c(1000,2000,3000))
predict(m.balance, pred.data, type="response")
m <- glm(default ~ balance + income + student, family = binomial)
summary(m)
predict(m, pred.data, type="response")
pred.data <- data.frame(balance=c(1000,2000,3000), income=1000, student="No")
predict(m, pred.data, type="response")
pred.data <- data.frame(balance=c(1000,2000,3000), income=1000, student="Yes")
predict(m, pred.data, type="response")
pred.data <- data.frame(balance=c(1000,2000,3000), income=4000, student="Yes")
predict(m, pred.data, type="response")
pred.data <- data.frame(balance=c(1000,2000,3000), income=4000, student="No")
predict(m, pred.data, type="response")
pred.probs <- predict(m, type="response")
View(pred.data)
pred.default < rep("No", nrow(Default))
pred.default <- rep("No", nrow(Default))
pred.default[pred.probs > 0.5] <- "Yes"
confusion.matrix <- table(default, pred.default)
print(confusion.matrix)
print(addmargins(confusion.matrix))
m.balance <- glm(default ~ balance,, family = binomial)
summary(m.balance)
pred.data <- data.frame(balance=c(1000,2000,3000))
predict(m.balance, pred.data, type="response")
library(ISLR)
attach(Default)
summary(Default)
m.balance <- glm(default ~ balance,, family = binomial)
summary(m.balance)
pred.data <- data.frame(balance=c(1000,2000,3000))
predict(m.balance, pred.data, type="response")
m <- glm(default ~ balance + income + student, family = binomial)
summary(m)
pred.data <- data.frame(balance=c(1000,2000,3000), income=4000, student="No")
predict(m, pred.data, type="response")
pred.probs <- predict(m, type="response")
pred.default <- rep("No", nrow(Default))
pred.default[pred.probs > 0.5] <- "Yes"
confusion.matrix <- table(default, pred.default)
print(addmargins(confusion.matrix))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data1 <- read.csv("6-15-2020.csv",header = TRUE, sep= ",")
("6-15-2020.csv",header = TRUE, sep= ",")
data1 <- read.csv("6-15-2020.csv",header = TRUE, sep= ",")
data2 <- read.csv("7-19-2020.csv",header = TRUE, sep= ",")
data <- merge(data1, data2, by= c("FIPS","Admin2","Province_State","Country_Region","Lat","Long_","Combined_Key"))
mask <- read.csv("Mask Usage.csv",header = TRUE, sep= ",")
mask <- read.csv("Mask Usage.csv",header = TRUE, sep= ",")
final_data <- merge(data,mask,by=c("FIPS"))
View(final_data)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data1 <- read.csv("6-15-2020.csv",header = TRUE, sep= ",")
data2 <- read.csv("7-19-2020.csv",header = TRUE, sep= ",")
data <- merge(data1, data2, by= c("FIPS","Admin2","Province_State","Country_Region","Lat","Long_","Combined_Key"))
mask <- read.csv("Mask Usage.csv",header = TRUE, sep= ",")
final_data <- merge(data,mask,by=c("FIPS"))
View(mask)
View(data)
final_data <- merge(data,mask,by=c("FIPS"))
mask <- read.csv("Mask Usage.csv",header = TRUE, sep= ",")
final_data <- merge(data,mask,by=c("FIPS"))
View(final_data)
county_gdp <- read.csv("lagdp1219.csv", header = TRUE, sep= ",")
View(county_gdp)
colnames(county_gdp) = county_gdp[3]
colnames(county_gdp) <- county_gdp[3]
county_gdp <- read.csv("lagdp1219.csv", header = TRUE, sep= ",")
colnames(county_gdp) <- county_gdp[3]
county_gdp <- read.csv("lagdp1219.csv", header = TRUE, sep= ",")
colnames(county_gdp) <- county_gdp[,3]
colnames(county_gdp) <- county_gdp[3,]
county_gdp <- read.csv("lagdp1219.csv", header = TRUE, sep= ",")
county_gdp[county_gdp['X'] in states]
county_gdp[county_gdp['X'] %in% states]
states = c(
"Alabama",
"Alaska",
"Arizona",
"Arkansas",
"California",
"Colorado",
"Connecticut",
"Delaware",
"Florida",
"Georgia",
"Hawaii",
"Idaho",
"Illinois",
"Indiana",
"Iowa",
"Kansas",
"Kentucky",
"Louisiana",
"Maine",
"Maryland",
"Massachusetts",
"Michigan",
"Minnesota",
"Mississippi",
"Missouri",
"Montana",
"Nebraska",
"Nevada",
"New Hampshire",
"New Jersey",
"New Mexico",
"New York",
"North Carolina",
"North Dakota",
"Ohio",
"Oklahoma",
"Oregon",
"Pennsylvania",
"Rhode Island",
"South Carolina",
"South Dakota",
"Tennessee",
"Texas",
"Utah",
"Vermont",
"Virginia",
"Washington",
"West Virginia",
"Wisconsin",
"Wyoming",
)
county_gdp[county_gdp['X'] %in% states]
states = c(
"Alabama",
"Alaska",
"Arizona",
"Arkansas",
"California",
"Colorado",
"Connecticut",
"Delaware",
"Florida",
"Georgia",
"Hawaii",
"Idaho",
"Illinois",
"Indiana",
"Iowa",
"Kansas",
"Kentucky",
"Louisiana",
"Maine",
"Maryland",
"Massachusetts",
"Michigan",
"Minnesota",
"Mississippi",
"Missouri",
"Montana",
"Nebraska",
"Nevada",
"New Hampshire",
"New Jersey",
"New Mexico",
"New York",
"North Carolina",
"North Dakota",
"Ohio",
"Oklahoma",
"Oregon",
"Pennsylvania",
"Rhode Island",
"South Carolina",
"South Dakota",
"Tennessee",
"Texas",
"Utah",
"Vermont",
"Virginia",
"Washington",
"West Virginia",
"Wisconsin",
"Wyoming"
)
county_gdp[county_gdp['X'] %in% states]
county_gdp[county_gdp[0] %in% states]
county_gdp[0]
county_gdp[0,]
county_gdp[,0]
county_gdp[,1]
county_gdp[county_gdp[,1] %in% states]
county_gdp[county_gdp[,1] %in% states]
county_gdp[,1]
county_gdp[county_gdp[,1] %in% states,]
county_gdp["States"] <- county_gdp[county_gdp[,1] %in% states,]
county_gdp$States <- county_gdp[county_gdp[,1] %in% states,]
county_gdp$States <- "N"
county_gdp[county_gdp[,1] %in% states,"States"] <- county_gdp[,"States"]
county_gdp$States <- "N"
county_gdp[county_gdp[,1] %in% states,"States"] <- county_gdp[county_gdp[,1] %in% states,1]
county_gdp$States <- NA
county_gdp[county_gdp[,1] %in% states,"States"] <- county_gdp[county_gdp[,1] %in% states,1]
county_gdp[,1]
fill(county_gdp, direction="down")
library(tidyr)
install.packages("tidyr")
library(tidyr)
fill(county_gdp, direction="down")
fill(county_gdp, .direction="down")
fill(county_gdp, .direction="down")
county_gdp$States <- NA
county_gdp[county_gdp[,1] %in% states,"States"] <- county_gdp[county_gdp[,1] %in% states,1]
fill(county_gdp, .direction="down")
county_gdp %>% fill(county_gdp, .direction="down")
county_gdp$State <- fill(county_gdp, .direction="down")
county_gdp <- read.csv("lagdp1219.csv", header = TRUE, sep= ",")
county_gdp$States <- NA
county_gdp[county_gdp[,1] %in% states,"States"] <- county_gdp[county_gdp[,1] %in% states,1]
county_gdp$States <- fill(county_gdp$States, .direction="down")
fill(county_gdp$States, .direction="down")
fill(county_gdp["States"], .direction="down")
fill(county_gdp["States"])
fill(county_gdp, States)
fill(county_gdp, States, .direction = "down")
county_gdp <- fill(county_gdp, States, .direction = "down")
county_gdp[county_gdp[,1] !%in% states]
county_gdp[county_gdp[,1] %notin% states]
county_gdp[!(county_gdp[,1] %in% states)]
county_gdp[!(county_gdp[,1] %in% states),]
county_gdp <- county_gdp[!(county_gdp[,1] %in% states),]
colnames(final_data)[2] = "County"
colnames(county_gdp)[1] <- "County"
county_gdp <- read.csv("lagdp1219.csv", header = TRUE, sep= ",")
county_gdp$Province_State <- NA
county_gdp[county_gdp[,1] %in% states,"Province_State"] <- county_gdp[county_gdp[,1] %in% states,1]
county_gdp <- fill(county_gdp, Province_State, .direction = "down")
county_gdp <- county_gdp[!(county_gdp[,1] %in% states),]
colnames(county_gdp)[1] <- "County"
county_gdp <- read.csv("lagdp1219.csv", header = TRUE, sep= ",")
county_gdp$Province_State <- NA
county_gdp[county_gdp[,1] %in% states,"Province_State"] <- county_gdp[county_gdp[,1] %in% states,1]
county_gdp <- fill(county_gdp, Province_State, .direction = "down")
county_gdp <- county_gdp[!(county_gdp[,1] %in% states),]
colnames(county_gdp)[1] <- "County"
county_gdp[, c(1,2)]
county_gdp[1, c(1,2)]
county_gdp[1, c(1,3)]
county_gdp[1, c(1,5)]
county_gdp[1, c(1,5,6)]
county_gdp[, c(1,5,6)]
county_gdp <- county_gdp[, c(1,5,6)]
colnames(county_gdp)[1] <- "County"
colnames(county_gdp)[1] <- "County"
colnames(county_gdp)[2] <- "GDP 2018"
merge(final_data, county_gdp, by= c("County","Province_State"))
final_data <- merge(final_data, county_gdp, by= c("County","Province_State"))
states <- read.csv("States.csv", header = TRUE, sep= ",")
states
states[,1]
states <- read.csv("States.csv", header = TRUE, sep= ",")[,1]
county_gdp$Province_State <- NA
county_gdp <- read.csv("lagdp1219.csv", header = TRUE, sep= ",")
states <- read.csv("States.csv", header = TRUE, sep= ",")[,1]
county_gdp$Province_State <- NA
county_gdp[county_gdp[,1] %in% states,"Province_State"] <- county_gdp[county_gdp[,1] %in% states,1]
county_gdp <- fill(county_gdp, Province_State, .direction = "down")
county_gdp <- county_gdp[!(county_gdp[,1] %in% states),]
county_gdp <- county_gdp[, c(1,5,6)]
colnames(county_gdp)[1] <- "County"
colnames(county_gdp)[2] <- "GDP 2018"
final_data <- merge(final_data, county_gdp, by= c("County","Province_State"))
county_gdp <- read.csv("lagdp1219.csv", header = TRUE, sep= ",")
library(tidyr)
data1 <- read.csv("6-15-2020.csv",header = TRUE, sep= ",")
data2 <- read.csv("7-19-2020.csv",header = TRUE, sep= ",")
data <- merge(data1, data2, by= c("FIPS","Admin2","Province_State","Country_Region","Lat","Long_","Combined_Key"))
mask <- read.csv("Mask Usage.csv",header = TRUE, sep= ",")
final_data <- merge(data,mask,by=c("FIPS"))
colnames(final_data)[2] = "County"
View(final_data)
county_gdp <- read.csv("lagdp1219.csv", header = TRUE, sep= ",")
states <- read.csv("States.csv", header = TRUE, sep= ",")[,1]
county_gdp$Province_State <- NA
county_gdp[county_gdp[,1] %in% states,"Province_State"] <- county_gdp[county_gdp[,1] %in% states,1]
county_gdp <- fill(county_gdp, Province_State, .direction = "down")
county_gdp <- county_gdp[!(county_gdp[,1] %in% states),]
county_gdp <- county_gdp[, c(1,5,6)]
colnames(county_gdp)[1] <- "County"
colnames(county_gdp)[2] <- "GDP 2018"
final_data <- merge(final_data, county_gdp, by= c("County","Province_State"))
write.csv(final_data, "./final_data.csv")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyr)
data1 <- read.csv("6-15-2020.csv",header = TRUE, sep= ",")
data2 <- read.csv("7-19-2020.csv",header = TRUE, sep= ",")
data <- merge(data1, data2, by= c("FIPS","Admin2","Province_State","Country_Region","Lat","Long_","Combined_Key"))
mask <- read.csv("Mask Usage.csv",header = TRUE, sep= ",")
final_data <- merge(data,mask,by=c("FIPS"))
colnames(final_data)[2] = "County"
county_gdp <- read.csv("lagdp1219.csv", header = TRUE, sep= ",")
# Get list of all states
states <- read.csv("States.csv", header = TRUE, sep= ",")[,1]
county_gdp$Province_State <- NA
county_gdp[county_gdp[,1] %in% states,"Province_State"] <- county_gdp[county_gdp[,1] %in% states,1]
county_gdp <- fill(county_gdp, Province_State, .direction = "down")
county_gdp <- county_gdp[!(county_gdp[,1] %in% states),]
county_gdp <- county_gdp[, c(1,5,6)]
colnames(county_gdp)[1] <- "County"
colnames(county_gdp)[2] <- "GDP 2018"
final_data <- merge(final_data, county_gdp, by= c("County","Province_State"))
write.csv(final_data, "./final_data.csv")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyr)
data1 <- read.csv("./data/6-15-2020.csv",header = TRUE, sep= ",")
data2 <- read.csv("./data/7-19-2020.csv",header = TRUE, sep= ",")
data <- merge(data1, data2, by= c("FIPS","Admin2","Province_State","Country_Region","Lat","Long_","Combined_Key"))
mask <- read.csv("./data/Mask Usage.csv",header = TRUE, sep= ",")
final_data <- merge(data,mask,by=c("FIPS"))
colnames(final_data)[2] = "County"
county_gdp <- read.csv("./data/lagdp1219.csv", header = TRUE, sep= ",")
# Get list of all states
states <- read.csv("./data/States.csv", header = TRUE, sep= ",")[,1]
county_gdp$Province_State <- NA
county_gdp[county_gdp[,1] %in% states,"Province_State"] <- county_gdp[county_gdp[,1] %in% states,1]
county_gdp <- fill(county_gdp, Province_State, .direction = "down")
county_gdp <- county_gdp[!(county_gdp[,1] %in% states),]
county_gdp <- county_gdp[, c(1,5,6)]
colnames(county_gdp)[1] <- "County"
colnames(county_gdp)[2] <- "GDP 2018"
final_data <- merge(final_data, county_gdp, by= c("County","Province_State"))
write.csv(final_data, "./data/final_data.csv")
